type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | LSQUARE
  | RSQUARE
  | INCLUDE
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | CONCAT
  | MOD
  | ASSIGN
  | POUND
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | DOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | PITCH
  | STRUCT
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | PLIT of (string)
  | STLIT of (string)
  | ARRAY
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 59 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* LSQUARE *);
  261 (* RSQUARE *);
  262 (* INCLUDE *);
  263 (* SEMI *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* LBRACE *);
  267 (* RBRACE *);
  268 (* COMMA *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* CONCAT *);
  274 (* MOD *);
  275 (* ASSIGN *);
  276 (* POUND *);
  277 (* NOT *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* AND *);
  285 (* OR *);
  286 (* DOT *);
  287 (* RETURN *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* VOID *);
  296 (* STR *);
  297 (* PITCH *);
  298 (* STRUCT *);
  306 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* LITERAL *);
  300 (* BLIT *);
  301 (* ID *);
  302 (* FLIT *);
  303 (* SLIT *);
  304 (* PLIT *);
  305 (* STLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\004\000\
\004\000\009\000\009\000\005\000\006\000\010\000\010\000\012\000\
\012\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\011\000\011\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\014\000\014\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\015\000\015\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\004\000\003\000\
\005\000\000\000\002\000\009\000\006\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\002\000\002\000\003\000\004\000\003\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\070\000\000\000\000\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\024\000\001\000\003\000\004\000\
\005\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\026\000\000\000\008\000\000\000\000\000\007\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\040\000\000\000\039\000\041\000\042\000\000\000\000\000\
\011\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\010\000\000\000\065\000\000\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\017\000\000\000\063\000\059\000\000\000\027\000\012\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\031\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\033\000\000\000\000\000\034\000"

let yydgoto = "\002\000\
\003\000\004\000\015\000\049\000\017\000\018\000\050\000\116\000\
\032\000\035\000\109\000\036\000\117\000\120\000\055\000\056\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\000\009\255\000\000\000\000\000\000\
\000\000\000\000\000\000\231\254\000\000\000\000\000\000\000\000\
\000\000\000\000\007\255\235\254\038\255\015\255\062\255\042\255\
\000\000\000\000\054\255\000\000\077\255\227\255\000\000\039\255\
\000\000\008\255\055\255\059\255\227\255\227\255\227\255\227\255\
\000\000\000\000\064\255\000\000\000\000\000\000\040\000\060\255\
\000\000\010\255\000\000\084\255\077\255\229\000\069\255\078\255\
\067\000\255\254\255\254\227\255\227\255\000\000\227\255\227\255\
\227\255\227\255\227\255\227\255\227\255\227\255\227\255\227\255\
\227\255\227\255\227\255\227\255\227\255\058\255\000\000\254\254\
\000\000\012\255\000\000\227\255\000\000\095\255\094\000\057\000\
\057\000\002\255\002\255\255\254\002\255\229\000\049\001\049\001\
\016\000\016\000\016\000\016\000\025\001\000\001\000\000\077\255\
\000\000\229\000\000\000\000\000\052\255\000\000\000\000\227\255\
\097\255\102\255\103\255\121\000\000\000\098\255\229\000\113\255\
\227\255\227\255\227\255\000\000\000\000\000\000\148\000\115\255\
\175\000\181\255\227\255\181\255\090\255\202\000\000\000\181\255\
\227\255\000\000\125\255\181\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\126\255\000\000\000\000\000\000\
\000\000\000\000\000\000\127\255\119\255\000\000\000\000\000\000\
\000\000\000\000\238\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\255\000\000\080\255\
\000\000\073\001\098\001\128\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\001\
\248\001\148\001\173\001\123\001\198\001\175\255\117\002\125\002\
\017\002\042\002\067\002\092\002\150\002\151\002\000\000\117\255\
\000\000\056\255\000\000\000\000\000\000\000\000\000\000\132\255\
\000\000\000\000\000\000\000\000\000\000\000\000\014\255\000\000\
\000\000\132\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\162\255\000\000\000\000\000\000\
\131\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\143\000\000\000\000\000\254\255\226\255\
\069\000\000\000\043\000\000\000\039\000\147\255\095\000\000\000"

let yytablesize = 948
let yytable = "\047\000\
\014\000\019\000\061\000\001\000\028\000\061\000\054\000\057\000\
\058\000\059\000\022\000\022\000\128\000\022\000\020\000\022\000\
\030\000\068\000\067\000\026\000\037\000\068\000\037\000\021\000\
\068\000\024\000\034\000\139\000\078\000\054\000\087\000\078\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\025\000\
\031\000\048\000\082\000\023\000\051\000\106\000\080\000\037\000\
\105\000\027\000\033\000\038\000\069\000\110\000\111\000\052\000\
\069\000\039\000\079\000\069\000\028\000\029\000\053\000\060\000\
\040\000\083\000\006\000\007\000\008\000\009\000\010\000\011\000\
\030\000\119\000\112\000\113\000\067\000\114\000\115\000\013\000\
\067\000\084\000\127\000\119\000\129\000\081\000\041\000\042\000\
\043\000\044\000\045\000\046\000\134\000\037\000\103\000\107\000\
\121\000\038\000\119\000\110\000\125\000\122\000\123\000\039\000\
\006\000\007\000\008\000\009\000\010\000\011\000\040\000\126\000\
\027\000\131\000\136\000\066\000\027\000\013\000\027\000\027\000\
\112\000\113\000\027\000\114\000\115\000\140\000\014\000\015\000\
\066\000\027\000\036\000\036\000\041\000\042\000\043\000\044\000\
\045\000\046\000\016\000\027\000\027\000\104\000\027\000\027\000\
\118\000\000\000\086\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\032\000\000\000\000\000\
\133\000\032\000\135\000\032\000\032\000\000\000\138\000\032\000\
\000\000\000\000\141\000\062\000\000\000\062\000\032\000\062\000\
\037\000\000\000\062\000\000\000\038\000\000\000\110\000\000\000\
\032\000\032\000\039\000\032\000\032\000\000\000\000\000\000\000\
\000\000\040\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\112\000\113\000\000\000\114\000\115\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\037\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\039\000\043\000\043\000\000\000\043\000\000\000\043\000\040\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\041\000\042\000\043\000\
\044\000\045\000\046\000\061\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\000\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\061\000\000\000\078\000\062\000\000\000\
\000\000\013\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\061\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\061\000\065\000\
\066\000\067\000\068\000\085\000\000\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\078\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\061\000\108\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\061\000\000\000\000\000\124\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\061\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\061\000\000\000\000\000\000\000\000\000\132\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\061\000\000\000\000\000\
\137\000\000\000\000\000\000\000\000\000\000\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\061\000\078\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\061\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\000\000\000\000\000\000\
\072\000\073\000\074\000\075\000\000\000\060\000\078\000\060\000\
\000\000\060\000\000\000\000\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\061\000\000\000\
\061\000\000\000\061\000\000\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\048\000\
\000\000\048\000\000\000\048\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\046\000\000\000\046\000\000\000\046\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\000\000\046\000\046\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\047\000\000\000\047\000\000\000\047\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\049\000\000\000\049\000\000\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\049\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\044\000\000\000\044\000\000\000\044\000\
\000\000\000\000\044\000\044\000\044\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\045\000\000\000\045\000\000\000\
\045\000\000\000\000\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\045\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\052\000\000\000\052\000\
\000\000\052\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\053\000\000\000\
\053\000\000\000\053\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\054\000\
\000\000\054\000\000\000\054\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\055\000\000\000\055\000\000\000\055\000\000\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\050\000\000\000\050\000\000\000\050\000\000\000\000\000\
\050\000\051\000\000\000\051\000\000\000\051\000\000\000\050\000\
\051\000\000\000\050\000\050\000\000\000\000\000\000\000\051\000\
\050\000\050\000\051\000\051\000\000\000\000\000\000\000\000\000\
\051\000\051\000\056\000\057\000\056\000\057\000\056\000\057\000\
\000\000\056\000\057\000\000\000\000\000\000\000\000\000\000\000\
\056\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\057\000"

let yycheck = "\030\000\
\000\000\004\000\004\001\001\000\007\001\004\001\037\000\038\000\
\039\000\040\000\004\001\004\001\122\000\004\001\006\001\004\001\
\019\001\005\001\017\001\005\001\007\001\009\001\009\001\049\001\
\012\001\047\001\029\000\137\000\030\001\060\000\061\000\030\001\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\010\001\
\007\001\011\001\053\000\045\001\045\001\084\000\045\001\004\001\
\045\001\043\001\005\001\008\001\005\001\010\001\011\001\009\001\
\009\001\014\001\007\001\012\001\007\001\008\001\012\001\008\001\
\021\001\005\001\036\001\037\001\038\001\039\001\040\001\041\001\
\019\001\112\000\031\001\032\001\005\001\034\001\035\001\049\001\
\009\001\012\001\121\000\122\000\123\000\010\001\043\001\044\001\
\045\001\046\001\047\001\048\001\131\000\004\001\045\001\009\001\
\008\001\008\001\137\000\010\001\011\001\008\001\008\001\014\001\
\036\001\037\001\038\001\039\001\040\001\041\001\021\001\007\001\
\004\001\007\001\033\001\005\001\008\001\049\001\010\001\011\001\
\031\001\032\001\014\001\034\001\035\001\009\001\009\001\009\001\
\009\001\021\001\007\001\009\001\043\001\044\001\045\001\046\001\
\047\001\048\001\004\000\031\001\032\001\081\000\034\001\035\001\
\110\000\255\255\060\000\255\255\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\004\001\255\255\255\255\
\130\000\008\001\132\000\010\001\011\001\255\255\136\000\014\001\
\255\255\255\255\140\000\005\001\255\255\007\001\021\001\009\001\
\004\001\255\255\012\001\255\255\008\001\255\255\010\001\255\255\
\031\001\032\001\014\001\034\001\035\001\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\031\001\032\001\255\255\034\001\035\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\004\001\255\255\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\004\001\005\001\255\255\007\001\255\255\009\001\021\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\004\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\004\001\255\255\030\001\007\001\255\255\
\255\255\049\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\004\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\004\001\015\001\
\016\001\017\001\018\001\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\030\001\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\004\001\255\255\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\004\001\255\255\255\255\
\007\001\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\004\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\004\001\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\005\001\030\001\007\001\
\255\255\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\005\001\255\255\
\007\001\255\255\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\005\001\
\255\255\007\001\255\255\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\005\001\255\255\007\001\255\255\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\005\001\255\255\007\001\255\255\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\005\001\255\255\007\001\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\005\001\255\255\007\001\255\255\009\001\
\255\255\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\005\001\255\255\007\001\255\255\
\009\001\255\255\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\005\001\255\255\007\001\
\255\255\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\005\001\255\255\
\007\001\255\255\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\005\001\
\255\255\007\001\255\255\009\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\005\001\255\255\007\001\255\255\009\001\255\255\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\005\001\255\255\007\001\255\255\009\001\255\255\255\255\
\012\001\005\001\255\255\007\001\255\255\009\001\255\255\019\001\
\012\001\255\255\022\001\023\001\255\255\255\255\255\255\019\001\
\028\001\029\001\022\001\023\001\255\255\255\255\255\255\255\255\
\028\001\029\001\005\001\005\001\007\001\007\001\009\001\009\001\
\255\255\012\001\012\001\255\255\255\255\255\255\255\255\255\255\
\019\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\029\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  LSQUARE\000\
  RSQUARE\000\
  INCLUDE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  CONCAT\000\
  MOD\000\
  ASSIGN\000\
  POUND\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  DOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  PITCH\000\
  STRUCT\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  PLIT\000\
  STLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 36 "parser.mly"
           ( _1 )
# 514 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                 ( {includes=[]; globals=[]; functions=[]; structs=[]} )
# 520 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idecl) in
    Obj.repr(
# 40 "parser.mly"
               ( {includes = (_2 :: _1.includes); globals = _1.globals; functions = _1.functions; structs = _1.structs} )
# 528 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 41 "parser.mly"
               ( {includes = _1.includes; globals = (_2 :: _1.globals); functions = _1.functions; structs = _1.structs} )
# 536 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( {includes = _1.includes; globals = _1.globals; functions = (_2 :: _1.functions); structs = _1.structs} )
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( {includes = _1.includes; globals = _1.globals; functions = _1.functions; structs = (_2 :: _1.structs)} )
# 552 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 46 "parser.mly"
                          ( Include(_3) )
# 559 "parser.ml"
               : 'idecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 49 "parser.mly"
               ( (_1, _2, Noexpr) )
# 567 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                             ( (_1, _2, _4) )
# 576 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                     ( [] )
# 582 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 54 "parser.mly"
                     ( _2 :: _1 )
# 590 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 58 "parser.mly"
   ( { typ = _1;
			 fname = _2;
			 formals = List.rev _4;
			 locals = List.rev _7;
			 body = List.rev _8 } )
# 605 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 66 "parser.mly"
    (
    {
      struct_name = _2;
      members = _4;
    })
# 617 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
               ( [] )
# 623 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 74 "parser.mly"
                 ( _1 )
# 630 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                           ( [(_1,_2,Noexpr)]     )
# 638 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
                            ( (_3,_4,Noexpr) :: _1 )
# 647 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
          ( Int   )
# 653 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
          ( Bool  )
# 659 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
          ( Float )
# 665 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
          ( Void  )
# 671 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
          ( String )
# 677 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
          ( Pitch )
# 683 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
          ( Struct(_1) )
# 690 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 88 "parser.mly"
                                ( Array(_1,_3) )
# 698 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 89 "parser.mly"
                        ( Array(_1,10) )
# 705 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                 ( [] )
# 711 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                  ( _2 :: _1 )
# 719 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                           ( Expr _1               )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 97 "parser.mly"
                                           ( Return _2             )
# 733 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 98 "parser.mly"
                                           ( Block(List.rev _2)    )
# 740 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 748 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
                                           ( If(_3, _5, _7)        )
# 757 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
                                                                      ( For(_3, _5, _7, _9)   )
# 767 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                           ( While(_3, _5)         )
# 775 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
               ( Noexpr )
# 781 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                 ( _1 )
# 788 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 109 "parser.mly"
                    ( Literal(_1)            )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                   ( Fliteral(_1)           )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 111 "parser.mly"
                    ( BoolLit(_1)            )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
                    ( Sliteral(_1)           )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                    ( Pliteral(_1)           )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                    ( Id(_1)                 )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                    ( Binop(_1, Con,   _3)   )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                    ( Binop(_1, Mod,   _3)   )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                    ( Binop(_1, Equal, _3)   )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 934 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                    ( StructAccess(_1, _3)   )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                             ( ArrayAccess(_1, _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                        ( Unop(Neg, _2)      )
# 965 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                    ( Unop(Not, _2)          )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                    ( Assign(_1, _3)         )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 135 "parser.mly"
                             ( Call(_1, _3)  )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                      ( _2                   )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 137 "parser.mly"
                              ( ArrayLit(_2) )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                ( [] )
# 1008 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 141 "parser.mly"
              ( List.rev _1 )
# 1015 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                          ( [_1] )
# 1022 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                        ( _3 :: _1 )
# 1030 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
