; ModuleID = 'MicroC'
source_filename = "MicroC"

%_chord = type opaque

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@"123" = private unnamed_addr constant [6 x i8] c"abccc\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @puts(i8*, ...)

declare i8* @pitch_to_int(i8*, ...)

define i32 @main() {
entry:
  %b = alloca double*
  %c = alloca { i32*, %_chord*, i8*, i8* }
  %struct.ptr = getelementptr inbounds { i32*, %_chord*, i8*, i8* }, { i32*, %_chord*, i8*, i8* }* %c, i32 0, i32 3
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"123", i32 0, i32 0), i8** %struct.ptr
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (double* getelementptr (double, double* null, i32 1) to i32), i32 3))
  %0 = bitcast i8* %malloccall to double*
  %1 = getelementptr double, double* %0, i32 0
  store double 1.000000e+00, double* %1
  %2 = getelementptr double, double* %0, i32 1
  store double 2.000000e+00, double* %2
  %3 = getelementptr double, double* %0, i32 2
  store double 3.200000e+00, double* %3
  store double* %0, double** %b
  %b1 = load double*, double** %b
  %4 = getelementptr double, double* %b1, i32 0
  store double 2.000000e+00, double* %4
  %b2 = load double*, double** %b
  %5 = getelementptr double, double* %b2, i32 100
  %6 = load double, double* %5
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %6)
  ret i32 0
}

declare noalias i8* @malloc(i32)
