; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @puts(i8*, ...)

declare i8* @pitch_to_int(i8*, ...)

define i32 @main() {
entry:
  %i = alloca i32
  %j = alloca i32
  %a = alloca i32*
  %b = alloca i32*
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2))
  %0 = bitcast i8* %malloccall to i32*
  %1 = getelementptr i32, i32* %0, i32 0
  store i32 3, i32* %1
  %2 = getelementptr i32, i32* %0, i32 1
  store i32 4, i32* %2
  store i32* %0, i32** %b
  %malloccall1 = tail call i8* @malloc(i32 mul (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2))
  %3 = bitcast i8* %malloccall1 to i32*
  %4 = getelementptr i32, i32* %3, i32 0
  store i32 1, i32* %4
  %5 = getelementptr i32, i32* %3, i32 1
  store i32 2, i32* %5
  store i32* %3, i32** %a
  %b2 = load i32*, i32** %b
  %a3 = load i32*, i32** %a
  %sum_result = call i32 @sum(i32* %a3, i32* %b2)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %sum_result)
  ret i32 0
}

define i32 @sum(i32* %x, i32* %y) {
entry:
  %x1 = alloca i32*
  store i32* %x, i32** %x1
  %y2 = alloca i32*
  store i32* %y, i32** %y2
  %x3 = load i32*, i32** %x1
  %0 = getelementptr i32, i32* %x3, i32 0
  %1 = load i32, i32* %0
  %y4 = load i32*, i32** %y2
  %2 = getelementptr i32, i32* %y4, i32 0
  %3 = load i32, i32* %2
  %tmp = add i32 %1, %3
  ret i32 %tmp
}

declare noalias i8* @malloc(i32)
