type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | LSQUARE
  | RSQUARE
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | DOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | PITCH
  | STRUCT
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | PLIT of (string)
  | STLIT of (string)
  | ARRAY
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* LSQUARE *);
  261 (* RSQUARE *);
  262 (* SEMI *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACE *);
  266 (* RBRACE *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MOD *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* DOT *);
  284 (* RETURN *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* INT *);
  290 (* BOOL *);
  291 (* FLOAT *);
  292 (* VOID *);
  293 (* STR *);
  294 (* PITCH *);
  295 (* STRUCT *);
  303 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* LITERAL *);
  297 (* BLIT *);
  298 (* ID *);
  299 (* FLIT *);
  300 (* SLIT *);
  301 (* PLIT *);
  302 (* STLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\007\000\007\000\
\004\000\005\000\008\000\008\000\010\000\010\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\009\000\009\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\014\000\014\000\015\000\015\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\003\000\000\000\002\000\
\009\000\006\000\000\000\001\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\004\000\000\000\002\000\
\002\000\003\000\003\000\005\000\007\000\009\000\005\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\002\000\002\000\
\003\000\004\000\003\000\003\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\065\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\000\000\021\000\000\000\001\000\003\000\004\000\
\005\000\000\000\000\000\000\000\000\000\007\000\000\000\006\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\008\000\
\000\000\013\000\000\000\000\000\010\000\000\000\007\000\000\000\
\000\000\014\000\000\000\000\000\000\000\023\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\036\000\000\000\
\035\000\037\000\038\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\000\000\059\000\027\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
\058\000\054\000\000\000\000\000\031\000\000\000\000\000\029\000\
\000\000\000\000\030\000"

let yydgoto = "\002\000\
\003\000\004\000\032\000\016\000\017\000\033\000\026\000\029\000\
\043\000\030\000\060\000\061\000\070\000\063\000\064\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\221\254\000\000\014\255\000\000\000\000\000\000\
\000\000\007\255\055\255\226\001\012\255\000\000\042\255\000\000\
\226\001\177\255\000\000\032\255\067\255\069\255\077\255\000\000\
\046\255\000\000\075\255\226\001\000\000\083\255\000\000\056\255\
\226\001\000\000\050\255\190\255\190\255\000\000\000\000\190\255\
\190\255\190\255\093\255\097\255\100\255\000\000\000\000\054\255\
\000\000\000\000\000\000\000\000\002\000\133\000\106\255\103\255\
\001\255\092\255\088\255\088\255\133\000\119\255\190\255\190\255\
\190\255\190\255\190\255\190\255\000\000\190\255\190\255\190\255\
\190\255\190\255\190\255\190\255\190\255\190\255\190\255\190\255\
\190\255\190\255\084\255\000\000\190\255\000\000\000\000\000\000\
\037\000\132\255\061\000\138\255\133\000\085\000\191\255\191\255\
\088\255\088\255\088\255\225\001\225\001\241\001\241\001\241\001\
\241\001\179\000\157\000\000\000\133\000\148\255\190\255\148\255\
\000\000\000\000\117\255\109\000\000\000\148\255\190\255\000\000\
\145\255\148\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\150\255\000\000\000\000\000\000\000\000\152\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\255\000\000\000\000\144\255\000\000\000\000\000\000\000\000\
\000\000\158\255\000\000\000\000\000\000\000\000\000\000\232\255\
\000\000\000\000\000\000\000\000\000\000\065\255\000\000\048\255\
\000\000\000\000\203\000\226\000\004\255\000\000\000\000\158\255\
\000\000\159\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\157\255\000\000\062\001\085\001\
\249\000\016\001\039\001\200\001\210\001\108\001\131\001\154\001\
\177\001\061\255\193\255\000\000\111\255\000\000\000\000\000\000\
\000\000\000\000\141\255\000\000\000\000\000\000\163\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\152\000\000\000\000\000\093\000\135\000\000\000\
\129\000\000\000\188\255\214\255\184\255\104\000\000\000"

let yytablesize = 785
let yytable = "\098\000\
\014\000\062\000\065\000\001\000\076\000\067\000\068\000\069\000\
\094\000\033\000\019\000\033\000\078\000\079\000\080\000\081\000\
\082\000\024\000\025\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\097\000\069\000\099\000\062\000\
\101\000\102\000\020\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\021\000\123\000\117\000\125\000\062\000\044\000\129\000\062\000\
\045\000\128\000\046\000\047\000\074\000\131\000\048\000\022\000\
\027\000\051\000\051\000\049\000\051\000\063\000\075\000\051\000\
\063\000\034\000\035\000\063\000\124\000\050\000\051\000\036\000\
\052\000\053\000\037\000\039\000\069\000\051\000\051\000\038\000\
\024\000\054\000\055\000\056\000\057\000\058\000\059\000\044\000\
\018\000\042\000\045\000\071\000\046\000\095\000\023\000\072\000\
\048\000\023\000\073\000\023\000\023\000\049\000\092\000\023\000\
\023\000\093\000\091\000\064\000\023\000\028\000\064\000\050\000\
\051\000\064\000\052\000\053\000\096\000\116\000\023\000\023\000\
\040\000\023\000\023\000\054\000\055\000\056\000\057\000\058\000\
\059\000\119\000\023\000\023\000\023\000\023\000\023\000\023\000\
\028\000\121\000\126\000\028\000\061\000\028\000\028\000\044\000\
\130\000\028\000\045\000\015\000\046\000\011\000\028\000\012\000\
\048\000\057\000\057\000\032\000\057\000\049\000\061\000\057\000\
\028\000\028\000\032\000\028\000\028\000\041\000\066\000\050\000\
\051\000\100\000\052\000\053\000\028\000\028\000\028\000\028\000\
\028\000\028\000\031\000\054\000\055\000\056\000\057\000\058\000\
\059\000\044\000\000\000\000\000\045\000\052\000\052\000\000\000\
\052\000\000\000\048\000\052\000\080\000\081\000\082\000\049\000\
\000\000\005\000\006\000\007\000\008\000\009\000\010\000\000\000\
\000\000\091\000\052\000\000\000\000\000\000\000\012\000\013\000\
\000\000\000\000\000\000\000\000\000\000\054\000\055\000\056\000\
\057\000\058\000\059\000\039\000\039\000\039\000\000\000\039\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\076\000\000\000\077\000\
\000\000\000\000\000\000\000\000\000\000\078\000\079\000\080\000\
\081\000\082\000\000\000\000\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\000\000\000\000\000\000\
\000\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\076\000\000\000\000\000\000\000\118\000\000\000\012\000\013\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\076\000\000\000\000\000\000\000\120\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\076\000\122\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\076\000\000\000\127\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\081\000\082\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\076\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\079\000\
\080\000\081\000\082\000\000\000\000\000\083\000\084\000\085\000\
\086\000\087\000\088\000\000\000\000\000\091\000\055\000\055\000\
\055\000\000\000\055\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\056\000\056\000\056\000\
\000\000\056\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\042\000\042\000\042\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\043\000\043\000\043\000\000\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\044\000\044\000\044\000\000\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\040\000\040\000\040\000\000\000\040\000\000\000\000\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\041\000\041\000\041\000\000\000\041\000\000\000\000\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\047\000\
\047\000\047\000\000\000\047\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\048\000\048\000\
\048\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\049\000\049\000\049\000\
\000\000\049\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\050\000\050\000\050\000\000\000\
\050\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\045\000\045\000\045\000\000\000\045\000\
\000\000\000\000\045\000\000\000\000\000\046\000\046\000\046\000\
\000\000\046\000\045\000\045\000\046\000\000\000\000\000\000\000\
\045\000\045\000\000\000\000\000\046\000\046\000\000\000\000\000\
\000\000\000\000\046\000\046\000\078\000\079\000\080\000\081\000\
\082\000\000\000\000\000\000\000\000\000\085\000\086\000\087\000\
\088\000\000\000\000\000\091\000\078\000\079\000\080\000\081\000\
\082\000\000\000\005\000\006\000\007\000\008\000\009\000\010\000\
\000\000\000\000\000\000\091\000\000\000\000\000\000\000\012\000\
\013\000"

let yycheck = "\072\000\
\000\000\044\000\045\000\001\000\004\001\048\000\049\000\050\000\
\008\001\006\001\046\001\008\001\012\001\013\001\014\001\015\001\
\016\001\006\001\007\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\071\000\072\000\073\000\074\000\
\075\000\076\000\021\001\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\042\001\118\000\093\000\120\000\005\001\004\001\127\000\008\001\
\007\001\126\000\009\001\010\001\007\001\130\000\013\001\009\001\
\023\001\005\001\006\001\018\001\008\001\005\001\017\001\011\001\
\008\001\042\001\008\001\011\001\119\000\028\001\029\001\011\001\
\031\001\032\001\006\001\009\001\127\000\025\001\026\001\042\001\
\006\001\040\001\041\001\042\001\043\001\044\001\045\001\004\001\
\004\000\042\001\007\001\007\001\009\001\010\001\004\001\007\001\
\013\001\007\001\007\001\009\001\010\001\018\001\005\001\013\001\
\020\000\011\001\027\001\005\001\018\001\025\000\008\001\028\001\
\029\001\011\001\031\001\032\001\006\001\042\001\028\001\029\001\
\036\000\031\001\032\001\040\001\041\001\042\001\043\001\044\001\
\045\001\006\001\040\001\041\001\042\001\043\001\044\001\045\001\
\004\001\008\001\030\001\007\001\005\001\009\001\010\001\004\001\
\008\001\013\001\007\001\004\000\009\001\008\001\018\001\008\001\
\013\001\005\001\006\001\006\001\008\001\018\001\008\001\011\001\
\028\001\029\001\008\001\031\001\032\001\039\000\046\000\028\001\
\029\001\074\000\031\001\032\001\040\001\041\001\042\001\043\001\
\044\001\045\001\010\001\040\001\041\001\042\001\043\001\044\001\
\045\001\004\001\255\255\255\255\007\001\005\001\006\001\255\255\
\008\001\255\255\013\001\011\001\014\001\015\001\016\001\018\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\027\001\026\001\255\255\255\255\255\255\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\004\001\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\004\001\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\004\001\255\255\255\255\255\255\008\001\255\255\046\001\047\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\004\001\255\255\255\255\255\255\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\004\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\005\001\006\001\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\005\001\006\001\255\255\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\005\001\006\001\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\005\001\006\001\255\255\008\001\255\255\255\255\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\004\001\005\001\006\001\255\255\008\001\255\255\255\255\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\004\001\
\005\001\006\001\255\255\008\001\255\255\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\005\001\006\001\
\255\255\008\001\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\005\001\006\001\255\255\
\008\001\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\019\001\020\001\011\001\255\255\255\255\255\255\
\025\001\026\001\255\255\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\012\001\013\001\014\001\015\001\
\016\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\046\001\
\047\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  LSQUARE\000\
  RSQUARE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  DOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  PITCH\000\
  STRUCT\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  PLIT\000\
  STLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
           ( _1 )
# 462 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( {globals=[]; functions=[]; structs=[]} )
# 468 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( {globals = (_2 :: _1.globals); functions = _1.functions; structs = _1.structs} )
# 476 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( {globals = _1.globals; functions = (_2 :: _1.functions); structs = _1.structs} )
# 484 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( {globals = _1.globals; functions = _1.functions; structs = (_2 :: _1.structs)} )
# 492 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 42 "parser.mly"
               ( (_1, _2) )
# 500 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                     ( [] )
# 506 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 46 "parser.mly"
                     ( _2 :: _1 )
# 514 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 50 "parser.mly"
   ( { typ = _1;
			 fname = _2;
			 formals = List.rev _4;
			 locals = List.rev _7;
			 body = List.rev _8 } )
# 529 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 58 "parser.mly"
    ({
      struct_name = _2;
      members = _4;
    })
# 540 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                ( [] )
# 546 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 65 "parser.mly"
                 ( _1 )
# 553 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                           ( [(_1,_2)]     )
# 561 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
                            ( (_3,_4) :: _1 )
# 570 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
          ( Int   )
# 576 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
          ( Bool  )
# 582 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
          ( Float )
# 588 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
          ( Void  )
# 594 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
          ( String )
# 600 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Pitch )
# 606 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
          ( Struct(_1) )
# 613 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 79 "parser.mly"
                     ( Array(_3) )
# 620 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                 ( [] )
# 626 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                  ( _2 :: _1 )
# 634 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                           ( Expr _1               )
# 641 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 87 "parser.mly"
                                           ( Return _2             )
# 648 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 88 "parser.mly"
                                           ( Block(List.rev _2)    )
# 655 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 663 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                           ( If(_3, _5, _7)        )
# 672 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
             ( For(_3, _5, _7, _9)   )
# 682 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                           ( While(_3, _5)         )
# 690 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
               ( Noexpr )
# 696 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                 ( _1 )
# 703 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                  ( Literal(_1)            )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                   ( Fliteral(_1)           )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 102 "parser.mly"
                    ( BoolLit(_1)            )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                    ( Sliteral(_1)           )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                    ( Pliteral(_1)           )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                    ( Id(_1)                 )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                    ( Binop(_1, Mod,   _3)   )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Binop(_1, Equal, _3)   )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                    ( StructAccess(_1, _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                             ( ArrayAccess(_1, _3) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                        ( Unop(Neg, _2)      )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Unop(Not, _2)          )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                    ( Assign(_1, _3)         )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 126 "parser.mly"
                             ( Call(_1, _3)  )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                      ( _2                   )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 128 "parser.mly"
                              ( ArrayLit(_2) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                ( [] )
# 915 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 132 "parser.mly"
              ( List.rev _1 )
# 922 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                          ( [_1] )
# 929 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                        ( _3 :: _1 )
# 937 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
