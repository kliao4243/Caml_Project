type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | PITCH
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | PLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 50 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* SEMI *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* MOD *);
  271 (* ASSIGN *);
  272 (* NOT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* INT *);
  287 (* BOOL *);
  288 (* FLOAT *);
  289 (* VOID *);
  290 (* STR *);
  291 (* PITCH *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  292 (* LITERAL *);
  293 (* BLIT *);
  294 (* ID *);
  295 (* FLIT *);
  296 (* SLIT *);
  297 (* PLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\014\000\
\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\058\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\001\000\003\000\004\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\016\000\
\000\000\000\000\009\000\017\000\000\000\000\000\000\000\000\000\
\019\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\032\000\000\000\031\000\033\000\034\000\020\000\000\000\
\000\000\000\000\049\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\023\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\039\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\025\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\019\000\026\000\030\000\
\020\000\047\000\048\000\054\000\081\000\082\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\237\254\069\255\000\000\
\075\255\011\255\049\255\052\255\000\000\057\255\075\255\000\000\
\032\255\075\255\000\000\000\000\040\255\051\255\082\255\006\255\
\000\000\000\000\006\255\006\255\006\255\092\255\106\255\107\255\
\000\000\000\000\045\255\000\000\000\000\000\000\000\000\002\000\
\199\000\088\255\000\000\000\000\252\000\090\255\006\255\006\255\
\006\255\006\255\006\255\000\000\006\255\006\255\006\255\006\255\
\006\255\006\255\006\255\006\255\006\255\006\255\006\255\006\255\
\006\255\000\000\000\000\000\000\218\000\111\255\237\000\252\000\
\112\255\110\255\252\000\089\255\089\255\000\000\000\000\000\000\
\038\001\038\001\071\255\071\255\071\255\071\255\025\001\011\001\
\199\255\006\255\199\255\000\000\006\255\093\255\033\000\000\000\
\252\000\199\255\006\255\000\000\115\255\199\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\116\255\000\000\000\000\117\255\000\000\000\000\000\000\000\000\
\000\000\125\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\127\255\000\000\000\000\000\000\
\000\000\000\000\237\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\255\000\000\000\000\127\255\
\000\000\128\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\255\
\000\000\129\255\059\255\054\000\075\000\000\000\000\000\000\000\
\180\000\184\000\096\000\117\000\138\000\159\000\048\255\004\255\
\000\000\000\000\000\000\000\000\000\000\162\255\000\000\000\000\
\042\255\000\000\131\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\112\000\000\000\245\255\000\000\000\000\106\000\
\000\000\166\255\224\255\202\255\000\000\000\000"

let yytablesize = 572
let yytable = "\049\000\
\011\000\078\000\051\000\052\000\053\000\018\000\102\000\048\000\
\104\000\048\000\032\000\025\000\048\000\001\000\029\000\108\000\
\035\000\056\000\015\000\111\000\056\000\036\000\077\000\053\000\
\079\000\080\000\083\000\048\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\041\000\042\000\043\000\044\000\045\000\046\000\057\000\
\021\000\058\000\057\000\047\000\109\000\047\000\022\000\032\000\
\047\000\033\000\034\000\059\000\023\000\035\000\051\000\024\000\
\051\000\103\000\036\000\051\000\105\000\027\000\047\000\047\000\
\016\000\017\000\053\000\037\000\038\000\031\000\039\000\040\000\
\061\000\062\000\063\000\064\000\065\000\016\000\041\000\042\000\
\043\000\044\000\045\000\046\000\032\000\076\000\033\000\075\000\
\055\000\029\000\035\000\029\000\063\000\064\000\065\000\036\000\
\005\000\006\000\007\000\008\000\009\000\010\000\056\000\057\000\
\037\000\038\000\098\000\039\000\040\000\100\000\101\000\106\000\
\110\000\006\000\007\000\041\000\042\000\043\000\044\000\045\000\
\046\000\019\000\028\000\019\000\019\000\054\000\055\000\019\000\
\028\000\028\000\050\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\019\000\000\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\024\000\000\000\
\024\000\024\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\000\000\024\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\032\000\000\000\033\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\038\000\000\000\039\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\042\000\043\000\044\000\045\000\046\000\
\035\000\000\000\035\000\000\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\060\000\000\000\000\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\107\000\000\000\000\000\000\000\
\000\000\000\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\036\000\000\000\036\000\000\000\000\000\036\000\036\000\
\036\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\037\000\000\000\
\037\000\000\000\000\000\037\000\037\000\037\000\000\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\043\000\000\000\043\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\044\000\000\000\044\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\045\000\000\000\045\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\046\000\000\000\046\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\041\000\
\000\000\041\000\000\000\042\000\041\000\042\000\000\000\000\000\
\042\000\000\000\000\000\000\000\041\000\041\000\000\000\000\000\
\042\000\042\000\041\000\041\000\074\000\000\000\042\000\042\000\
\061\000\062\000\063\000\064\000\065\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\097\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\099\000\000\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\061\000\062\000\063\000\
\064\000\065\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\061\000\062\000\063\000\064\000\
\065\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\061\000\062\000\063\000\064\000\065\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\061\000\
\062\000\063\000\064\000\065\000\000\000\000\000\000\000\000\000\
\068\000\069\000\070\000\071\000"

let yycheck = "\032\000\
\000\000\056\000\035\000\036\000\037\000\017\000\097\000\004\001\
\099\000\006\001\005\001\023\000\009\001\001\000\026\000\106\000\
\011\001\006\001\038\001\110\000\009\001\016\001\055\000\056\000\
\057\000\058\000\059\000\024\001\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\036\001\037\001\038\001\039\001\040\001\041\001\006\001\
\038\001\005\001\009\001\004\001\107\000\006\001\006\001\005\001\
\009\001\007\001\008\001\015\001\009\001\011\001\004\001\007\001\
\006\001\098\000\016\001\009\001\101\000\038\001\023\001\024\001\
\004\001\005\001\107\000\025\001\026\001\038\001\028\001\029\001\
\010\001\011\001\012\001\013\001\014\001\004\001\036\001\037\001\
\038\001\039\001\040\001\041\001\005\001\004\001\007\001\008\001\
\005\001\004\001\011\001\006\001\012\001\013\001\014\001\016\001\
\030\001\031\001\032\001\033\001\034\001\035\001\005\001\005\001\
\025\001\026\001\004\001\028\001\029\001\006\001\009\001\027\001\
\006\001\006\001\006\001\036\001\037\001\038\001\039\001\040\001\
\041\001\005\001\004\001\007\001\008\001\006\001\006\001\011\001\
\006\001\026\000\033\000\255\255\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\005\001\255\255\
\007\001\008\001\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\004\001\255\255\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\004\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\004\001\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\004\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\004\001\255\255\006\001\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\004\001\255\255\006\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\004\001\
\255\255\006\001\255\255\004\001\009\001\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\017\001\018\001\023\001\024\001\006\001\255\255\023\001\024\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  PITCH\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  PLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
            ( _1 )
# 379 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                 ( ([], [])               )
# 385 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 393 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 401 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 41 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 416 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                  ( [] )
# 422 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 49 "parser.mly"
                  ( _1 )
# 429 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                             ( [(_1,_2)]     )
# 437 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                             ( (_3,_4) :: _1 )
# 446 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
          ( Int   )
# 452 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( Bool  )
# 458 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
          ( Float )
# 464 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Void  )
# 470 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
          ( String )
# 476 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
          ( Pitch )
# 482 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                     ( [] )
# 488 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 65 "parser.mly"
                     ( _2 :: _1 )
# 496 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 68 "parser.mly"
               ( (_1, _2) )
# 504 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                   ( [] )
# 510 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 72 "parser.mly"
                   ( _2 :: _1 )
# 518 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                            ( Expr _1               )
# 525 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 76 "parser.mly"
                                            ( Return _2             )
# 532 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 77 "parser.mly"
                                            ( Block(List.rev _2)    )
# 539 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 556 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 566 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                            ( While(_3, _5)         )
# 574 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                  ( Noexpr )
# 580 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                  ( _1 )
# 587 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "parser.mly"
                     ( Literal(_1)            )
# 594 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                    ( Fliteral(_1)           )
# 601 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 91 "parser.mly"
                     ( BoolLit(_1)            )
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                     ( Sliteral(_1)           )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                     ( Pliteral(_1)           )
# 622 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( Id(_1)                 )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 637 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 661 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                         ( Unop(Neg, _2)      )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Unop(Not, _2)          )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Assign(_1, _3)         )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 113 "parser.mly"
                              ( Call(_1, _3)  )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( _2                   )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                  ( [] )
# 776 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 119 "parser.mly"
               ( List.rev _1 )
# 783 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                            ( [_1] )
# 790 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                         ( _3 :: _1 )
# 798 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
