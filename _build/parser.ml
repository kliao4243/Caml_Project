type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | ARRAY_SIZE
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | ARRAY
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 52 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* SEMI *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LSQUARE *);
  266 (* RSQUARE *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MOD *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* FLOAT *);
  291 (* VOID *);
  292 (* STR *);
  293 (* ARRAY_SIZE *);
  299 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* LITERAL *);
  295 (* BLIT *);
  296 (* ID *);
  297 (* FLIT *);
  298 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\004\000\000\000\
\002\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\004\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\003\000\004\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\060\000\000\000\010\000\011\000\012\000\013\000\
\014\000\000\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\018\000\000\000\015\000\000\000\000\000\000\000\008\000\
\000\000\000\000\016\000\000\000\000\000\009\000\017\000\000\000\
\000\000\000\000\000\000\019\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\032\000\000\000\
\031\000\033\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\023\000\054\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\039\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\052\000\055\000\000\000\000\000\027\000\000\000\000\000\025\000\
\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\022\000\029\000\033\000\
\023\000\051\000\052\000\061\000\056\000\057\000"

let yysindex = "\019\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\005\255\000\000\000\000\000\000\241\254\211\255\018\255\
\011\255\000\000\211\255\000\000\009\255\044\255\051\255\000\000\
\048\255\211\255\000\000\024\255\211\255\000\000\000\000\029\255\
\052\255\067\255\198\255\000\000\000\000\198\255\198\255\198\255\
\198\255\069\255\071\255\072\255\073\255\000\000\000\000\007\255\
\000\000\000\000\000\000\237\255\191\000\090\255\009\001\086\255\
\093\255\000\000\000\000\009\001\097\255\198\255\198\255\198\255\
\065\255\198\255\198\255\198\255\000\000\198\255\198\255\198\255\
\198\255\198\255\198\255\198\255\198\255\198\255\198\255\198\255\
\198\255\198\255\000\000\000\000\000\000\198\255\000\000\212\000\
\105\255\233\000\104\255\110\255\250\000\009\001\140\255\140\255\
\000\000\000\000\000\000\051\001\051\001\126\255\126\255\126\255\
\126\255\038\001\024\001\009\001\160\255\198\255\160\255\000\000\
\000\000\000\000\083\255\004\000\000\000\160\255\198\255\000\000\
\116\255\160\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\117\255\000\000\000\000\000\000\119\255\000\000\
\000\000\000\000\000\000\000\000\106\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\255\000\000\000\000\
\122\255\000\000\000\000\000\000\000\000\000\000\000\000\208\255\
\000\000\000\000\000\000\000\000\000\000\000\000\042\255\000\000\
\003\255\000\000\000\000\013\255\000\000\000\000\122\255\000\000\
\000\000\152\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\255\035\000\058\000\
\000\000\000\000\000\000\173\000\176\000\081\000\104\000\127\000\
\150\000\062\255\004\255\075\255\000\000\000\000\000\000\000\000\
\000\000\000\000\144\255\000\000\000\000\000\000\153\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\121\000\000\000\248\255\000\000\000\000\124\000\
\000\000\201\255\221\255\195\255\095\000\000\000"

let yytablesize = 587
let yytable = "\053\000\
\011\000\089\000\055\000\058\000\059\000\060\000\017\000\048\000\
\057\000\048\000\021\000\066\000\057\000\048\000\048\000\067\000\
\029\000\028\000\029\000\001\000\032\000\018\000\019\000\068\000\
\016\000\015\000\088\000\060\000\090\000\048\000\055\000\093\000\
\094\000\020\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\058\000\
\024\000\025\000\108\000\058\000\058\000\115\000\027\000\117\000\
\035\000\121\000\036\000\037\000\038\000\026\000\120\000\030\000\
\039\000\047\000\123\000\047\000\034\000\040\000\018\000\047\000\
\047\000\062\000\116\000\063\000\064\000\065\000\041\000\042\000\
\059\000\043\000\044\000\060\000\059\000\059\000\047\000\047\000\
\045\000\046\000\047\000\048\000\049\000\050\000\035\000\085\000\
\036\000\084\000\038\000\051\000\087\000\051\000\039\000\086\000\
\091\000\051\000\051\000\040\000\110\000\112\000\019\000\118\000\
\019\000\019\000\019\000\113\000\041\000\042\000\019\000\043\000\
\044\000\122\000\006\000\019\000\007\000\028\000\045\000\046\000\
\047\000\048\000\049\000\050\000\019\000\019\000\056\000\019\000\
\019\000\070\000\071\000\072\000\073\000\074\000\019\000\019\000\
\019\000\019\000\019\000\019\000\024\000\031\000\024\000\024\000\
\024\000\072\000\073\000\074\000\024\000\056\000\028\000\054\000\
\092\000\024\000\000\000\000\000\035\000\000\000\036\000\000\000\
\038\000\000\000\024\000\024\000\039\000\024\000\024\000\000\000\
\000\000\040\000\000\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\041\000\042\000\000\000\043\000\044\000\000\000\
\000\000\000\000\000\000\000\000\045\000\046\000\047\000\048\000\
\049\000\050\000\035\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\039\000\035\000\000\000\035\000\000\000\040\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\045\000\046\000\047\000\048\000\049\000\050\000\
\069\000\000\000\005\000\006\000\007\000\008\000\009\000\000\000\
\070\000\071\000\072\000\073\000\074\000\010\000\000\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\119\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\000\000\000\000\
\005\000\006\000\007\000\008\000\009\000\000\000\036\000\000\000\
\036\000\000\000\000\000\010\000\036\000\036\000\036\000\036\000\
\000\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\037\000\000\000\037\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\043\000\000\000\043\000\000\000\
\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\044\000\000\000\044\000\000\000\000\000\
\000\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\045\000\000\000\045\000\000\000\000\000\000\000\
\045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\046\000\000\000\046\000\000\000\000\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\041\000\000\000\041\000\042\000\000\000\042\000\041\000\041\000\
\000\000\042\000\042\000\000\000\000\000\000\000\000\000\041\000\
\041\000\000\000\042\000\042\000\083\000\041\000\041\000\000\000\
\042\000\042\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\109\000\000\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\111\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\114\000\000\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000"

let yycheck = "\035\000\
\000\000\063\000\038\000\039\000\040\000\041\000\015\000\004\001\
\006\001\006\001\019\000\005\001\010\001\010\001\011\001\009\001\
\004\001\026\000\006\001\001\000\029\000\004\001\005\001\017\001\
\040\001\021\001\062\000\063\000\064\000\026\001\066\000\067\000\
\068\000\023\001\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\006\001\
\040\001\006\001\086\000\010\001\011\001\109\000\007\001\111\000\
\005\001\119\000\007\001\008\001\009\001\011\001\118\000\040\001\
\013\001\004\001\122\000\006\001\040\001\018\001\004\001\010\001\
\011\001\005\001\110\000\005\001\005\001\005\001\027\001\028\001\
\006\001\030\001\031\001\119\000\010\001\011\001\025\001\026\001\
\037\001\038\001\039\001\040\001\041\001\042\001\005\001\010\001\
\007\001\008\001\009\001\004\001\004\001\006\001\013\001\011\001\
\040\001\010\001\011\001\018\001\004\001\006\001\005\001\029\001\
\007\001\008\001\009\001\006\001\027\001\028\001\013\001\030\001\
\031\001\006\001\006\001\018\001\006\001\004\001\037\001\038\001\
\039\001\040\001\041\001\042\001\027\001\028\001\010\001\030\001\
\031\001\012\001\013\001\014\001\015\001\016\001\037\001\038\001\
\039\001\040\001\041\001\042\001\005\001\029\000\007\001\008\001\
\009\001\014\001\015\001\016\001\013\001\006\001\006\001\036\000\
\066\000\018\001\255\255\255\255\005\001\255\255\007\001\255\255\
\009\001\255\255\027\001\028\001\013\001\030\001\031\001\255\255\
\255\255\018\001\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\027\001\028\001\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\005\001\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\004\001\255\255\006\001\255\255\018\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\037\001\038\001\039\001\040\001\041\001\042\001\
\004\001\255\255\032\001\033\001\034\001\035\001\036\001\255\255\
\012\001\013\001\014\001\015\001\016\001\043\001\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\004\001\255\255\
\006\001\255\255\255\255\043\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\006\001\255\255\255\255\255\255\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\004\001\255\255\006\001\004\001\255\255\006\001\010\001\011\001\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\019\001\020\001\006\001\025\001\026\001\255\255\
\025\001\026\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\006\001\255\255\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  ARRAY_SIZE\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parser.mly"
           ( _1 )
# 395 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                ( ([], [])               )
# 401 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 409 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 417 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
   ( { typ = _1;
			 fname = _2;
			 formals = List.rev _4;
			 locals = List.rev _7;
			 body = List.rev _8 } )
# 432 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                ( [] )
# 438 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 51 "parser.mly"
                 ( _1 )
# 445 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                           ( [(_1,_2)]     )
# 453 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                            ( (_3,_4) :: _1 )
# 462 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
       ( Int   )
# 468 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
         ( Bool  )
# 474 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
         ( Float )
# 480 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( Void  )
# 486 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( String )
# 492 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
                    ( Array(_3) )
# 499 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                   ( [] )
# 505 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                    ( _2 :: _1 )
# 513 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
              ( (_1, _2) )
# 521 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                 ( [] )
# 527 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                  ( _2 :: _1 )
# 535 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                           ( Expr _1               )
# 542 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 78 "parser.mly"
                                           ( Return _2             )
# 549 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
                                           ( Block(List.rev _2)    )
# 556 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 564 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                           ( If(_3, _5, _7)        )
# 573 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
             ( For(_3, _5, _7, _9)   )
# 583 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                           ( While(_3, _5)         )
# 591 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                ( Noexpr )
# 597 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                 ( _1 )
# 604 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
                  ( Literal(_1)            )
# 611 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                   ( Fliteral(_1)           )
# 618 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 93 "parser.mly"
                    ( BoolLit(_1)            )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                    ( Sliteral(_1)           )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
                              ( ArraySize(_3))
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                    ( Id(_1)                 )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 654 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 662 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                    ( Binop(_1, Mod,   _3)   )
# 686 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                    ( Binop(_1, Equal, _3)   )
# 694 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 702 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 734 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                        ( Unop(Neg, _2)      )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Unop(Not, _2)          )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                    ( Assign(_1, _3)         )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 115 "parser.mly"
                             ( Call(_1, _3)  )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                      ( _2                   )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 117 "parser.mly"
                              ( ArrayLit(_2) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                             ( ArrayAccess(_1, _3) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                ( [] )
# 808 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 122 "parser.mly"
              ( List.rev _1 )
# 815 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                          ( [_1] )
# 822 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                        ( _3 :: _1 )
# 830 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
