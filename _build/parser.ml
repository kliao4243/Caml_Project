type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | DOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | PITCH
  | STRUCT
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | PLIT of (string)
  | STLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* SEMI *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* MOD *);
  271 (* ASSIGN *);
  272 (* NOT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LEQ *);
  277 (* GT *);
  278 (* GEQ *);
  279 (* AND *);
  280 (* OR *);
  281 (* DOT *);
  282 (* RETURN *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* INT *);
  288 (* BOOL *);
  289 (* FLOAT *);
  290 (* VOID *);
  291 (* STR *);
  292 (* PITCH *);
  293 (* STRUCT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* LITERAL *);
  295 (* BLIT *);
  296 (* ID *);
  297 (* FLIT *);
  298 (* SLIT *);
  299 (* PLIT *);
  300 (* STLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\007\000\007\000\
\004\000\005\000\008\000\008\000\010\000\010\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\009\000\009\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\014\000\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\003\000\000\000\002\000\
\009\000\006\000\000\000\001\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\000\000\021\000\001\000\003\000\004\000\005\000\
\000\000\000\000\000\000\007\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\013\000\000\000\000\000\
\010\000\000\000\007\000\000\000\000\000\014\000\000\000\000\000\
\022\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\035\000\000\000\034\000\036\000\037\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\026\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\028\000\000\000\000\000\
\029\000"

let yydgoto = "\002\000\
\003\000\004\000\028\000\015\000\016\000\029\000\023\000\025\000\
\039\000\026\000\055\000\056\000\062\000\090\000\091\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\255\000\000\000\000\000\000\000\000\000\000\
\014\255\042\255\038\255\000\000\000\000\130\001\161\255\017\255\
\047\255\049\255\055\255\000\000\020\255\000\000\054\255\130\001\
\000\000\069\255\000\000\034\255\130\001\000\000\040\255\171\255\
\000\000\000\000\171\255\171\255\171\255\070\255\080\255\083\255\
\000\000\000\000\006\255\000\000\000\000\000\000\000\000\233\255\
\031\001\079\255\064\255\064\255\087\001\088\255\171\255\171\255\
\171\255\171\255\171\255\000\000\171\255\171\255\171\255\171\255\
\171\255\171\255\171\255\171\255\171\255\171\255\171\255\171\255\
\171\255\056\255\000\000\000\000\000\000\051\001\094\255\071\001\
\087\001\093\255\091\255\087\001\051\255\051\255\064\255\064\255\
\064\255\135\001\135\001\015\000\015\000\015\000\015\000\119\001\
\103\001\000\000\132\255\171\255\132\255\000\000\171\255\073\255\
\255\255\000\000\087\001\132\255\171\255\000\000\097\255\132\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\255\000\000\000\000\
\000\000\101\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\255\000\000\000\000\000\000\
\000\000\000\000\211\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\058\000\046\255\000\000\000\000\106\255\
\000\000\105\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\255\000\000\108\255\008\255\142\000\163\000\079\000\100\000\
\121\000\012\001\016\001\184\000\205\000\226\000\247\000\175\255\
\004\255\000\000\000\000\000\000\000\000\000\000\000\000\125\255\
\000\000\000\000\013\255\000\000\047\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\119\000\000\000\000\000\040\000\096\000\000\000\
\093\000\000\000\156\255\216\255\194\255\000\000\000\000"

let yytablesize = 686
let yytable = "\057\000\
\013\000\087\000\059\000\060\000\061\000\001\000\112\000\051\000\
\114\000\051\000\066\000\055\000\051\000\055\000\060\000\118\000\
\055\000\060\000\061\000\121\000\067\000\061\000\086\000\061\000\
\088\000\089\000\092\000\051\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\021\000\022\000\017\000\040\000\018\000\041\000\042\000\
\020\000\032\000\043\000\032\000\031\000\019\000\119\000\044\000\
\030\000\032\000\033\000\034\000\035\000\024\000\071\000\072\000\
\073\000\045\000\046\000\113\000\047\000\048\000\115\000\036\000\
\021\000\038\000\063\000\082\000\061\000\049\000\050\000\051\000\
\052\000\053\000\054\000\040\000\064\000\041\000\084\000\065\000\
\082\000\043\000\022\000\085\000\022\000\022\000\044\000\106\000\
\022\000\108\000\110\000\111\000\116\000\022\000\120\000\011\000\
\045\000\046\000\012\000\047\000\048\000\031\000\058\000\022\000\
\022\000\059\000\022\000\022\000\049\000\050\000\051\000\052\000\
\053\000\054\000\014\000\022\000\022\000\022\000\022\000\022\000\
\022\000\027\000\037\000\027\000\027\000\058\000\000\000\027\000\
\040\000\000\000\041\000\000\000\027\000\000\000\043\000\000\000\
\000\000\000\000\000\000\044\000\000\000\000\000\027\000\027\000\
\000\000\027\000\027\000\000\000\000\000\045\000\046\000\000\000\
\047\000\048\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\049\000\050\000\051\000\052\000\053\000\054\000\040\000\
\000\000\000\000\050\000\000\000\050\000\043\000\000\000\050\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\053\000\054\000\038\000\000\000\
\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\068\000\000\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\000\000\
\000\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\117\000\000\000\000\000\000\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\082\000\
\053\000\000\000\053\000\000\000\012\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\000\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\054\000\000\000\054\000\
\000\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\041\000\000\000\041\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\042\000\
\000\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\043\000\000\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\039\000\000\000\039\000\000\000\000\000\039\000\039\000\
\039\000\000\000\000\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\040\000\000\000\
\040\000\000\000\000\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\046\000\000\000\046\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\047\000\000\000\047\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\048\000\000\000\048\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\049\000\000\000\049\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\044\000\
\000\000\044\000\000\000\045\000\044\000\045\000\000\000\000\000\
\045\000\000\000\000\000\000\000\044\000\044\000\000\000\000\000\
\045\000\045\000\044\000\044\000\083\000\000\000\045\000\045\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\107\000\000\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\109\000\000\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\000\000\000\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\000\000\
\000\000\076\000\077\000\078\000\079\000\000\000\000\000\082\000\
\005\000\006\000\007\000\008\000\009\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000"

let yycheck = "\040\000\
\000\000\064\000\043\000\044\000\045\000\001\000\107\000\004\001\
\109\000\006\001\005\001\004\001\009\001\006\001\006\001\116\000\
\009\001\009\001\006\001\120\000\015\001\009\001\063\000\064\000\
\065\000\066\000\067\000\024\001\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\004\001\005\001\004\000\005\001\044\001\007\001\008\001\
\007\001\004\001\011\001\006\001\006\001\040\001\117\000\016\001\
\040\001\009\001\004\001\040\001\007\001\022\000\012\001\013\001\
\014\001\026\001\027\001\108\000\029\001\030\001\111\000\032\000\
\004\001\040\001\005\001\025\001\117\000\038\001\039\001\040\001\
\041\001\042\001\043\001\005\001\005\001\007\001\008\001\005\001\
\025\001\011\001\005\001\004\001\007\001\008\001\016\001\040\001\
\011\001\004\001\006\001\009\001\028\001\016\001\006\001\006\001\
\026\001\027\001\006\001\029\001\030\001\004\001\006\001\026\001\
\027\001\006\001\029\001\030\001\038\001\039\001\040\001\041\001\
\042\001\043\001\004\000\038\001\039\001\040\001\041\001\042\001\
\043\001\005\001\035\000\007\001\008\001\041\000\255\255\011\001\
\005\001\255\255\007\001\255\255\016\001\255\255\011\001\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\026\001\027\001\255\255\
\029\001\030\001\038\001\039\001\040\001\041\001\042\001\043\001\
\008\001\038\001\039\001\040\001\041\001\042\001\043\001\005\001\
\255\255\255\255\004\001\255\255\006\001\011\001\255\255\009\001\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\044\001\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\004\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\025\001\
\004\001\255\255\006\001\255\255\044\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\004\001\255\255\006\001\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\004\001\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\004\001\
\255\255\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\004\001\255\255\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\004\001\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\004\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\004\001\255\255\006\001\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\004\001\255\255\006\001\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\004\001\
\255\255\006\001\255\255\004\001\009\001\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\017\001\018\001\023\001\024\001\006\001\255\255\023\001\024\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  DOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  PITCH\000\
  STRUCT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  PLIT\000\
  STLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
            ( _1 )
# 422 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                 ( {globals=[]; functions=[]; structs=[]} )
# 428 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "parser.mly"
               ( {globals = (_2 :: _1.globals); functions = _1.functions; structs = _1.structs} )
# 436 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( {globals = _1.globals; functions = (_2 :: _1.functions); structs = _1.structs} )
# 444 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( {globals = _1.globals; functions = _1.functions; structs = (_2 :: _1.structs)} )
# 452 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 41 "parser.mly"
               ( (_1, _2) )
# 460 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                     ( [] )
# 466 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 45 "parser.mly"
                     ( _2 :: _1 )
# 474 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 489 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    Obj.repr(
# 57 "parser.mly"
    ({
      struct_name = _2;
      members = _4;
    })
# 500 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                  ( [] )
# 506 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 64 "parser.mly"
                  ( _1 )
# 513 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                             ( [(_1,_2)]     )
# 521 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                             ( (_3,_4) :: _1 )
# 530 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
          ( Int   )
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
          ( Bool  )
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
          ( Float )
# 548 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
          ( Void  )
# 554 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
          ( String )
# 560 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
          ( Pitch )
# 566 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
          ( Struct(_1) )
# 573 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                   ( [] )
# 579 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                   ( _2 :: _1 )
# 587 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                            ( Expr _1               )
# 594 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 88 "parser.mly"
                                            ( Return _2             )
# 601 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
                                            ( Block(List.rev _2)    )
# 608 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 616 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 625 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 635 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                            ( While(_3, _5)         )
# 643 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( Noexpr )
# 649 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                  ( _1 )
# 656 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "parser.mly"
                     ( Literal(_1)            )
# 663 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                    ( Fliteral(_1)           )
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "parser.mly"
                     ( BoolLit(_1)            )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                     ( Sliteral(_1)           )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                     ( Pliteral(_1)           )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                     ( Id(_1)                 )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
                     ( StructAccess(_1, _3) )
# 810 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                         ( Unop(Neg, _2)      )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Unop(Not, _2)          )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Assign(_1, _3)         )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 126 "parser.mly"
                              ( Call(_1, _3)  )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                       ( _2                   )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                  ( [] )
# 853 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 132 "parser.mly"
               ( List.rev _1 )
# 860 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                            ( [_1] )
# 867 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                         ( _3 :: _1 )
# 875 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
