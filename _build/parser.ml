type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | PITCH
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | PLIT of (string)
  | ARRAY
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* SEMI *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LSQUARE *);
  266 (* RSQUARE *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MOD *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* FLOAT *);
  291 (* VOID *);
  292 (* STR *);
  293 (* PITCH *);
  300 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* LITERAL *);
  295 (* BLIT *);
  296 (* ID *);
  297 (* FLIT *);
  298 (* SLIT *);
  299 (* PLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\007\000\007\000\003\000\008\000\008\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\000\000\002\000\003\000\000\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\003\000\004\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\061\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\019\000\000\000\016\000\000\000\000\000\000\000\
\008\000\000\000\000\000\017\000\000\000\000\000\009\000\018\000\
\000\000\000\000\000\000\000\000\020\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\033\000\000\000\
\032\000\034\000\035\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\024\000\055\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\056\000\
\000\000\000\000\028\000\000\000\000\000\026\000\000\000\000\000\
\027\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\015\000\023\000\030\000\034\000\
\024\000\052\000\053\000\062\000\057\000\058\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\244\254\000\000\000\000\000\000\014\255\071\255\
\043\255\033\255\000\000\071\255\000\000\029\255\064\255\065\255\
\000\000\070\255\071\255\000\000\038\255\071\255\000\000\000\000\
\049\255\044\255\090\255\206\255\000\000\000\000\206\255\206\255\
\206\255\206\255\092\255\093\255\097\255\000\000\000\000\003\255\
\000\000\000\000\000\000\000\000\151\000\097\001\083\255\175\001\
\099\255\107\255\110\255\110\255\175\001\116\255\206\255\206\255\
\206\255\206\255\206\255\000\000\206\255\206\255\206\255\206\255\
\206\255\206\255\206\255\206\255\206\255\206\255\206\255\206\255\
\206\255\206\255\000\000\000\000\000\000\206\255\000\000\118\001\
\124\255\139\001\126\255\175\001\157\001\052\255\052\255\110\255\
\110\255\110\255\210\001\210\001\010\255\010\255\010\255\010\255\
\008\000\193\001\175\001\200\255\206\255\200\255\000\000\000\000\
\112\255\174\000\000\000\200\255\206\255\000\000\133\255\200\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\137\255\000\000\000\000\000\000\138\255\
\000\000\000\000\000\000\000\000\000\000\122\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\135\255\000\000\
\000\000\143\255\000\000\000\000\000\000\000\000\000\000\246\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\255\
\000\000\053\255\036\000\059\000\009\255\000\000\000\000\143\255\
\000\000\142\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\255\000\000\197\000\220\000\082\000\
\105\000\128\000\079\001\082\001\243\000\010\001\033\001\056\001\
\054\255\006\255\127\255\000\000\000\000\000\000\000\000\000\000\
\161\255\000\000\000\000\000\000\145\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\124\000\000\000\247\255\000\000\000\000\118\000\
\000\000\026\000\220\255\194\255\090\000\000\000"

let yytablesize = 746
let yytable = "\054\000\
\012\000\089\000\056\000\059\000\060\000\061\000\018\000\066\000\
\016\000\049\000\022\000\049\000\030\000\001\000\030\000\049\000\
\049\000\029\000\069\000\067\000\033\000\070\000\071\000\072\000\
\073\000\074\000\088\000\061\000\090\000\056\000\092\000\049\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\019\000\020\000\
\036\000\107\000\037\000\038\000\039\000\017\000\119\000\021\000\
\040\000\048\000\058\000\048\000\069\000\041\000\058\000\048\000\
\048\000\072\000\073\000\074\000\025\000\026\000\042\000\043\000\
\114\000\044\000\045\000\027\000\028\000\031\000\048\000\048\000\
\061\000\046\000\047\000\048\000\049\000\050\000\051\000\036\000\
\035\000\037\000\084\000\039\000\052\000\019\000\052\000\040\000\
\063\000\064\000\052\000\052\000\041\000\065\000\005\000\006\000\
\007\000\008\000\009\000\010\000\085\000\042\000\043\000\059\000\
\044\000\045\000\011\000\059\000\059\000\086\000\069\000\087\000\
\046\000\047\000\048\000\049\000\050\000\051\000\020\000\109\000\
\020\000\020\000\020\000\111\000\060\000\113\000\020\000\115\000\
\060\000\060\000\120\000\020\000\116\000\118\000\006\000\007\000\
\057\000\121\000\029\000\057\000\020\000\020\000\029\000\020\000\
\020\000\032\000\055\000\091\000\000\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\025\000\000\000\025\000\
\025\000\025\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\025\000\000\000\025\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\036\000\000\000\037\000\000\000\
\039\000\000\000\036\000\000\000\040\000\000\000\039\000\000\000\
\000\000\041\000\040\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\042\000\043\000\000\000\044\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\047\000\048\000\
\049\000\050\000\051\000\046\000\047\000\048\000\049\000\050\000\
\051\000\036\000\000\000\036\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\069\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\000\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\005\000\006\000\007\000\008\000\009\000\010\000\000\000\050\000\
\000\000\050\000\000\000\000\000\011\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\051\000\000\000\
\051\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\039\000\000\000\039\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\040\000\000\000\040\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\041\000\000\000\041\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\068\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\117\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\037\000\000\000\037\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\038\000\
\000\000\038\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\044\000\000\000\
\044\000\000\000\000\000\000\000\044\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\045\000\000\000\045\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\046\000\000\000\046\000\000\000\
\000\000\000\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\047\000\000\000\047\000\000\000\000\000\
\000\000\047\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\042\000\000\000\042\000\043\000\000\000\043\000\
\042\000\042\000\000\000\043\000\043\000\000\000\000\000\000\000\
\000\000\042\000\042\000\000\000\043\000\043\000\083\000\042\000\
\042\000\069\000\043\000\043\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\108\000\000\000\000\000\069\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\110\000\000\000\000\000\069\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\069\000\112\000\000\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\069\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\069\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\069\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\000\000\000\000\077\000\078\000\
\079\000\080\000"

let yycheck = "\036\000\
\000\000\064\000\039\000\040\000\041\000\042\000\016\000\005\001\
\021\001\004\001\020\000\006\001\004\001\001\000\006\001\010\001\
\011\001\027\000\009\001\017\001\030\000\012\001\013\001\014\001\
\015\001\016\001\063\000\064\000\065\000\066\000\067\000\026\001\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\004\001\005\001\
\005\001\086\000\007\001\008\001\009\001\040\001\117\000\023\001\
\013\001\004\001\006\001\006\001\009\001\018\001\010\001\010\001\
\011\001\014\001\015\001\016\001\040\001\006\001\027\001\028\001\
\109\000\030\001\031\001\011\001\007\001\040\001\025\001\026\001\
\117\000\038\001\039\001\040\001\041\001\042\001\043\001\005\001\
\040\001\007\001\008\001\009\001\004\001\004\001\006\001\013\001\
\005\001\005\001\010\001\011\001\018\001\005\001\032\001\033\001\
\034\001\035\001\036\001\037\001\010\001\027\001\028\001\006\001\
\030\001\031\001\044\001\010\001\011\001\011\001\009\001\004\001\
\038\001\039\001\040\001\041\001\042\001\043\001\005\001\004\001\
\007\001\008\001\009\001\006\001\006\001\108\000\013\001\110\000\
\010\001\011\001\006\001\018\001\029\001\116\000\006\001\006\001\
\010\001\120\000\004\001\006\001\027\001\028\001\006\001\030\001\
\031\001\030\000\037\000\066\000\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\005\001\255\255\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\005\001\255\255\007\001\255\255\
\009\001\255\255\005\001\255\255\013\001\255\255\009\001\255\255\
\255\255\018\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\027\001\028\001\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\038\001\039\001\040\001\041\001\042\001\
\043\001\004\001\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\004\001\
\255\255\006\001\255\255\255\255\044\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\004\001\255\255\
\006\001\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\004\001\255\255\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\006\001\004\001\255\255\006\001\
\010\001\011\001\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\019\001\020\001\006\001\025\001\
\026\001\009\001\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\006\001\255\255\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\006\001\255\255\255\255\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  PITCH\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  PLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
           ( _1 )
# 438 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                ( ([], [])               )
# 444 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 452 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 460 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
   ( { typ = _1;
			 fname = _2;
			 formals = List.rev _4;
			 locals = List.rev _7;
			 body = List.rev _8 } )
# 475 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( [] )
# 481 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                 ( _1 )
# 488 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                           ( [(_1,_2)]     )
# 496 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                            ( (_3,_4) :: _1 )
# 505 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
       ( Int   )
# 511 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
         ( Bool  )
# 517 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
         ( Float )
# 523 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
         ( Void  )
# 529 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( String )
# 535 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( Pitch )
# 541 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
                    ( Array(_3) )
# 548 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                   ( [] )
# 554 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                    ( _2 :: _1 )
# 562 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
              ( (_1, _2) )
# 570 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                 ( [] )
# 576 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                  ( _2 :: _1 )
# 584 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                           ( Expr _1               )
# 591 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 78 "parser.mly"
                                           ( Return _2             )
# 598 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
                                           ( Block(List.rev _2)    )
# 605 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 613 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                           ( If(_3, _5, _7)        )
# 622 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
             ( For(_3, _5, _7, _9)   )
# 632 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                           ( While(_3, _5)         )
# 640 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
               ( Noexpr )
# 646 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                 ( _1 )
# 653 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
                  ( Literal(_1)            )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                   ( Fliteral(_1)           )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 93 "parser.mly"
                    ( BoolLit(_1)            )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                    ( Sliteral(_1)           )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                    ( Pliteral(_1)           )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                    ( Id(_1)                 )
# 695 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 703 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 711 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 727 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                    ( Binop(_1, Mod,   _3)   )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                    ( Binop(_1, Equal, _3)   )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                        ( Unop(Neg, _2)      )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Unop(Not, _2)          )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                    ( Assign(_1, _3)         )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 115 "parser.mly"
                             ( Call(_1, _3)  )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                      ( _2                   )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 117 "parser.mly"
                              ( ArrayLit(_2) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                             ( ArrayAccess(_1, _3) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                ( [] )
# 857 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 122 "parser.mly"
              ( List.rev _1 )
# 864 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                          ( [_1] )
# 871 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                        ( _3 :: _1 )
# 879 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
