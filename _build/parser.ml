type token =
  | QUOTE
  | APOSTROPHE
  | COLON
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STR
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | ARRAY
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 51 "parser.ml"
let yytransl_const = [|
  257 (* QUOTE *);
  258 (* APOSTROPHE *);
  259 (* COLON *);
  260 (* SEMI *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LSQUARE *);
  266 (* RSQUARE *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MOD *);
  273 (* ASSIGN *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* FLOAT *);
  291 (* VOID *);
  292 (* STR *);
  298 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  293 (* LITERAL *);
  294 (* BLIT *);
  295 (* ID *);
  296 (* FLIT *);
  297 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\004\000\000\000\
\002\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\004\000\003\000\003\000\004\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\059\000\000\000\010\000\011\000\012\000\013\000\
\014\000\000\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\018\000\000\000\015\000\000\000\000\000\000\000\008\000\
\000\000\000\000\016\000\000\000\000\000\009\000\017\000\000\000\
\000\000\000\000\000\000\019\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\032\000\000\000\031\000\
\033\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\023\000\053\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\054\000\000\000\000\000\
\027\000\000\000\000\000\025\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\022\000\029\000\033\000\
\023\000\050\000\051\000\060\000\055\000\056\000"

let yysindex = "\006\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\252\254\000\000\000\000\000\000\238\254\171\001\019\255\
\024\255\000\000\171\001\000\000\011\255\045\255\043\255\000\000\
\050\255\171\001\000\000\027\255\171\001\000\000\000\000\031\255\
\051\255\069\255\194\255\000\000\000\000\194\255\194\255\194\255\
\194\255\071\255\072\255\078\255\000\000\000\000\008\255\000\000\
\000\000\000\000\103\000\049\001\088\255\127\001\064\255\073\255\
\076\255\076\255\127\001\082\255\194\255\194\255\194\255\194\255\
\194\255\000\000\194\255\194\255\194\255\194\255\194\255\194\255\
\194\255\194\255\194\255\194\255\194\255\194\255\194\255\194\255\
\000\000\000\000\000\000\194\255\000\000\070\001\083\255\091\001\
\093\255\127\001\109\001\089\255\089\255\076\255\076\255\076\255\
\178\001\178\001\124\255\124\255\124\255\124\255\162\001\145\001\
\127\001\157\255\194\255\157\255\000\000\000\000\065\255\126\000\
\000\000\157\255\194\255\000\000\094\255\157\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\255\000\000\000\000\000\000\101\255\000\000\
\000\000\000\000\000\000\000\000\104\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\255\000\000\000\000\
\106\255\000\000\000\000\000\000\000\000\000\000\204\255\000\000\
\000\000\000\000\000\000\000\000\000\000\150\255\000\000\004\255\
\232\255\255\255\014\255\000\000\000\000\106\255\000\000\108\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\147\255\000\000\149\000\172\000\034\000\057\000\080\000\
\042\255\031\001\195\000\218\000\241\000\008\001\034\001\005\255\
\180\255\000\000\000\000\000\000\000\000\000\000\141\255\000\000\
\000\000\000\000\114\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\092\000\000\000\249\255\000\000\000\000\087\000\
\000\000\213\255\221\255\196\255\060\000\000\000"

let yytablesize = 725
let yytable = "\052\000\
\011\000\087\000\054\000\057\000\058\000\059\000\001\000\017\000\
\047\000\056\000\047\000\021\000\064\000\056\000\047\000\047\000\
\015\000\029\000\028\000\029\000\016\000\032\000\018\000\019\000\
\065\000\086\000\059\000\088\000\054\000\090\000\047\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\040\000\020\000\040\000\
\105\000\024\000\025\000\040\000\040\000\026\000\117\000\035\000\
\027\000\036\000\037\000\038\000\040\000\040\000\111\000\039\000\
\113\000\030\000\040\000\040\000\040\000\034\000\116\000\112\000\
\018\000\083\000\119\000\061\000\062\000\041\000\042\000\059\000\
\043\000\044\000\063\000\084\000\067\000\085\000\107\000\045\000\
\046\000\047\000\048\000\049\000\035\000\114\000\036\000\082\000\
\038\000\067\000\109\000\118\000\039\000\006\000\070\000\071\000\
\072\000\040\000\007\000\055\000\019\000\028\000\019\000\019\000\
\019\000\055\000\041\000\042\000\019\000\043\000\044\000\028\000\
\031\000\019\000\053\000\089\000\045\000\046\000\047\000\048\000\
\049\000\000\000\019\000\019\000\067\000\019\000\019\000\068\000\
\069\000\070\000\071\000\072\000\019\000\019\000\019\000\019\000\
\019\000\024\000\000\000\024\000\024\000\024\000\050\000\000\000\
\050\000\024\000\000\000\057\000\050\000\050\000\024\000\057\000\
\057\000\035\000\000\000\036\000\000\000\038\000\000\000\024\000\
\024\000\039\000\024\000\024\000\000\000\000\000\040\000\000\000\
\000\000\024\000\024\000\024\000\024\000\024\000\000\000\041\000\
\042\000\058\000\043\000\044\000\000\000\058\000\058\000\000\000\
\000\000\045\000\046\000\047\000\048\000\049\000\035\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\039\000\034\000\
\000\000\034\000\000\000\040\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\045\000\046\000\
\047\000\048\000\049\000\048\000\000\000\048\000\000\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\049\000\000\000\049\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\006\000\007\000\008\000\009\000\037\000\000\000\037\000\
\000\000\000\000\010\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\038\000\000\000\038\000\000\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\039\000\000\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\066\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\068\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\115\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\000\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\035\000\000\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\036\000\
\000\000\036\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\042\000\000\000\
\042\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\043\000\000\000\043\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\044\000\000\000\044\000\000\000\
\000\000\000\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\045\000\000\000\045\000\000\000\000\000\
\000\000\045\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\041\000\000\000\041\000\046\000\000\000\046\000\
\041\000\041\000\000\000\046\000\046\000\000\000\000\000\000\000\
\000\000\041\000\041\000\000\000\000\000\000\000\081\000\041\000\
\041\000\067\000\046\000\046\000\068\000\069\000\070\000\071\000\
\072\000\000\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\106\000\000\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\000\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\108\000\000\000\000\000\067\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\000\000\000\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\067\000\110\000\000\000\
\068\000\069\000\070\000\071\000\072\000\000\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\067\000\
\000\000\000\000\068\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\067\000\000\000\000\000\068\000\069\000\070\000\071\000\
\072\000\000\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\067\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\000\000\000\000\073\000\074\000\075\000\076\000\
\077\000\078\000\067\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\000\000\000\000\000\000\000\000\075\000\076\000\
\077\000\078\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\000\000\010\000"

let yycheck = "\035\000\
\000\000\062\000\038\000\039\000\040\000\041\000\001\000\015\000\
\004\001\006\001\006\001\019\000\005\001\010\001\010\001\011\001\
\021\001\004\001\026\000\006\001\039\001\029\000\004\001\005\001\
\017\001\061\000\062\000\063\000\064\000\065\000\026\001\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\004\001\023\001\006\001\
\084\000\039\001\006\001\010\001\011\001\011\001\115\000\005\001\
\007\001\007\001\008\001\009\001\019\001\020\001\106\000\013\001\
\108\000\039\001\025\001\026\001\018\001\039\001\114\000\107\000\
\004\001\010\001\118\000\005\001\005\001\027\001\028\001\115\000\
\030\001\031\001\005\001\011\001\009\001\004\001\004\001\037\001\
\038\001\039\001\040\001\041\001\005\001\029\001\007\001\008\001\
\009\001\009\001\006\001\006\001\013\001\006\001\014\001\015\001\
\016\001\018\001\006\001\010\001\005\001\004\001\007\001\008\001\
\009\001\006\001\027\001\028\001\013\001\030\001\031\001\006\001\
\029\000\018\001\036\000\064\000\037\001\038\001\039\001\040\001\
\041\001\255\255\027\001\028\001\009\001\030\001\031\001\012\001\
\013\001\014\001\015\001\016\001\037\001\038\001\039\001\040\001\
\041\001\005\001\255\255\007\001\008\001\009\001\004\001\255\255\
\006\001\013\001\255\255\006\001\010\001\011\001\018\001\010\001\
\011\001\005\001\255\255\007\001\255\255\009\001\255\255\027\001\
\028\001\013\001\030\001\031\001\255\255\255\255\018\001\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\255\255\027\001\
\028\001\006\001\030\001\031\001\255\255\010\001\011\001\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\005\001\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\004\001\
\255\255\006\001\255\255\018\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\037\001\038\001\
\039\001\040\001\041\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\004\001\255\255\006\001\
\255\255\255\255\042\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\004\001\255\255\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\004\001\255\255\006\001\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\006\001\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\006\001\004\001\255\255\006\001\
\010\001\011\001\255\255\010\001\011\001\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\006\001\025\001\
\026\001\009\001\025\001\026\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\006\001\255\255\255\255\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\006\001\255\255\255\255\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\042\001"

let yynames_const = "\
  QUOTE\000\
  APOSTROPHE\000\
  COLON\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STR\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 33 "parser.mly"
           ( _1 )
# 423 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                ( ([], [])               )
# 429 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 437 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 445 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
   ( { typ = _1;
			 fname = _2;
			 formals = List.rev _4;
			 locals = List.rev _7;
			 body = List.rev _8 } )
# 460 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( [] )
# 466 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                 ( _1 )
# 473 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                           ( [(_1,_2)]     )
# 481 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                            ( (_3,_4) :: _1 )
# 490 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
       ( Int   )
# 496 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
         ( Bool  )
# 502 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
         ( Float )
# 508 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
         ( Void  )
# 514 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( String )
# 520 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 62 "parser.mly"
                    ( Array(_3) )
# 527 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                   ( [] )
# 533 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 66 "parser.mly"
                    ( _2 :: _1 )
# 541 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 69 "parser.mly"
              ( (_1, _2) )
# 549 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                 ( [] )
# 555 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 73 "parser.mly"
                  ( _2 :: _1 )
# 563 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                                           ( Expr _1               )
# 570 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 77 "parser.mly"
                                           ( Return _2             )
# 577 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
                                           ( Block(List.rev _2)    )
# 584 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 592 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                           ( If(_3, _5, _7)        )
# 601 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
             ( For(_3, _5, _7, _9)   )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                                           ( While(_3, _5)         )
# 619 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                ( Noexpr )
# 625 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                 ( _1 )
# 632 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
                  ( Literal(_1)            )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                   ( Fliteral(_1)           )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 92 "parser.mly"
                    ( BoolLit(_1)            )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                    ( Sliteral(_1)           )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                    ( Id(_1)                 )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                    ( Binop(_1, Add,   _3)   )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                    ( Binop(_1, Sub,   _3)   )
# 683 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                    ( Binop(_1, Mult,  _3)   )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                    ( Binop(_1, Div,   _3)   )
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                    ( Binop(_1, Mod,   _3)   )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                    ( Binop(_1, Equal, _3)   )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                    ( Binop(_1, Neq,   _3)   )
# 723 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                    ( Binop(_1, Less,  _3)   )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                    ( Binop(_1, Leq,   _3)   )
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                    ( Binop(_1, Geq,   _3)   )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( Binop(_1, And,   _3)   )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop(_1, Or,    _3)   )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                        ( Unop(Neg, _2)      )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                    ( Unop(Not, _2)          )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                    ( Assign(_1, _3)         )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 113 "parser.mly"
                             ( Call(_1, _3)  )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                      ( _2                   )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 115 "parser.mly"
                              ( ArrayLit(_2) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                             ( ArrayAccess(_1, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                ( [] )
# 829 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 120 "parser.mly"
              ( List.rev _1 )
# 836 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                          ( [_1] )
# 843 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                        ( _3 :: _1 )
# 851 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
