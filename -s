; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@"4#" = private unnamed_addr constant [4 x i8] c"1#1\00", align 1
@"4#.2" = private unnamed_addr constant [4 x i8] c"2#1\00", align 1
@"4#.3" = private unnamed_addr constant [4 x i8] c"3#1\00", align 1
@"4#.4" = private unnamed_addr constant [4 x i8] c"4#1\00", align 1
@"4#.5" = private unnamed_addr constant [4 x i8] c"5#1\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@fmt.8 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.9 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @print_arr(i32, ...)

declare i8* @puts(i8*, ...)

declare i32 @pitch_to_int(i8*, ...)

define i32 @main() {
entry:
  %i = alloca i32
  %tem = alloca i8**
  %melody_a = alloca i8**
  %rhythm_a = alloca i32*
  %track_1 = alloca { i32*, i8**, i32, i32 }
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), i32 5))
  %0 = bitcast i8* %malloccall to i8**
  %1 = getelementptr i8*, i8** %0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"4#", i32 0, i32 0), i8** %1
  %2 = getelementptr i8*, i8** %0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"4#.2", i32 0, i32 0), i8** %2
  %3 = getelementptr i8*, i8** %0, i32 2
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"4#.3", i32 0, i32 0), i8** %3
  %4 = getelementptr i8*, i8** %0, i32 3
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"4#.4", i32 0, i32 0), i8** %4
  %5 = getelementptr i8*, i8** %0, i32 4
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"4#.5", i32 0, i32 0), i8** %5
  store i8** %0, i8*** %melody_a
  %malloccall1 = tail call i8* @malloc(i32 mul (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 5))
  %6 = bitcast i8* %malloccall1 to i32*
  %7 = getelementptr i32, i32* %6, i32 0
  store i32 1, i32* %7
  %8 = getelementptr i32, i32* %6, i32 1
  store i32 1, i32* %8
  %9 = getelementptr i32, i32* %6, i32 2
  store i32 1, i32* %9
  %10 = getelementptr i32, i32* %6, i32 3
  store i32 1, i32* %10
  %11 = getelementptr i32, i32* %6, i32 4
  store i32 2, i32* %11
  store i32* %6, i32** %rhythm_a
  %rhythm_a2 = load i32*, i32** %rhythm_a
  %melody_a3 = load i8**, i8*** %melody_a
  %build_track_result = call { i32*, i8**, i32, i32 } @build_track(i32 1, i32 5, i8** %melody_a3, i32* %rhythm_a2)
  store { i32*, i8**, i32, i32 } %build_track_result, { i32*, i8**, i32, i32 }* %track_1
  %track_14 = load { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %track_1
  call void @generate_music({ i32*, i8**, i32, i32 } %track_14)
  ret i32 0
}

define void @generate_music({ i32*, i8**, i32, i32 } %t) {
entry:
  %t1 = alloca { i32*, i8**, i32, i32 }
  store { i32*, i8**, i32, i32 } %t, { i32*, i8**, i32, i32 }* %t1
  %i = alloca i32
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 1)
  %struct.ptr = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %t1, i32 0, i32 3
  %struct.val.instrument = load i32, i32* %struct.ptr
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 %struct.val.instrument)
  %struct.ptr3 = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %t1, i32 0, i32 2
  %struct.val.size = load i32, i32* %struct.ptr3
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 %struct.val.size)
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %while_body, %entry
  %i12 = load i32, i32* %i
  %struct.ptr13 = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %t1, i32 0, i32 2
  %struct.val.size14 = load i32, i32* %struct.ptr13
  %tmp15 = icmp slt i32 %i12, %struct.val.size14
  br i1 %tmp15, label %while_body, label %merge

while_body:                                       ; preds = %while
  %struct.ptr5 = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %t1, i32 0, i32 1
  %struct.val.melody = load i8**, i8*** %struct.ptr5
  %i6 = load i32, i32* %i
  %0 = getelementptr i8*, i8** %struct.val.melody, i32 %i6
  %1 = load i8*, i8** %0
  %pitchtoint = call i32 (i8*, ...) @pitch_to_int(i8* %1)
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 %pitchtoint)
  %struct.ptr8 = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %t1, i32 0, i32 0
  %struct.val.rhythm = load i32*, i32** %struct.ptr8
  %i9 = load i32, i32* %i
  %2 = getelementptr i32, i32* %struct.val.rhythm, i32 %i9
  %3 = load i32, i32* %2
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 %3)
  %i11 = load i32, i32* %i
  %tmp = add i32 %i11, 1
  store i32 %tmp, i32* %i
  br label %while

merge:                                            ; preds = %while
  ret void
}

define { i32*, i8**, i32, i32 } @build_track(i32 %instrument, i32 %size, i8** %melody, i32* %rhythm) {
entry:
  %instrument1 = alloca i32
  store i32 %instrument, i32* %instrument1
  %size2 = alloca i32
  store i32 %size, i32* %size2
  %melody3 = alloca i8**
  store i8** %melody, i8*** %melody3
  %rhythm4 = alloca i32*
  store i32* %rhythm, i32** %rhythm4
  %res = alloca { i32*, i8**, i32, i32 }
  %i = alloca i32
  %melody5 = load i8**, i8*** %melody3
  %struct.ptr = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %res, i32 0, i32 1
  store i8** %melody5, i8*** %struct.ptr
  %rhythm6 = load i32*, i32** %rhythm4
  %struct.ptr7 = getelementptr inbounds { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %res, i32 0, i32 0
  store i32* %rhythm6, i32** %struct.ptr7
  %res8 = load { i32*, i8**, i32, i32 }, { i32*, i8**, i32, i32 }* %res
  ret { i32*, i8**, i32, i32 } %res8
}

declare noalias i8* @malloc(i32)
